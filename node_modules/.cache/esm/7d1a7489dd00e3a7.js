let Study,multer,path,fs;_dd0‍.x([["default",()=>_dd0‍.o]]);_dd0‍.w("../model/Study",[["default",["Study"],function(v){Study=v}]]);_dd0‍.w("multer",[["default",["multer"],function(v){multer=v}]]);_dd0‍.w("path",[["default",["path"],function(v){path=v}]]);_dd0‍.w("fs",[["default",["fs"],function(v){fs=v}]]);






const storage = multer.diskStorage({
  destination: (req,file,cb) => cb(null, 'uploads/'),
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname)
  },
    
    });

const handleMultipartData = multer({ storage, limit: {filesize : 1000000 * 5 }}).fields([{name: 'assignments'},{name: 'lecture'}])

const studyController = {

    async addassignments(req, res) {
    handleMultipartData(req,res, async (err) => {
            
        const {  title, description, assignments, lecture, result, batch } = req.body;
        const filePath = req.files.assignments[0].path;
        const video = req.files.lecture[0].path;
       _dd0‍.g.console.log(req.body)
          let document;
        try{
           document = await Study.create({
            title,
            description,
            assignments: filePath,
            lecture: video,
            result,
            batch
             });
          }
          catch(err){
             _dd0‍.g.console.log(err)
          }
          res.status(201).json({
              success:true,
              data: document
          }); 
      });
    }

}
_dd0‍.d(studyController);